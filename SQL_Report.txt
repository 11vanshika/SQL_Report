SQL(Structured Query Language):-
    #SQL Command Categories:-
      1)Data Definition Language(DDL):-DDL changes the structure of the table like creating a table, deleting a table, altering a table, etc.
        All the command of DDL are auto-committed that means it permanently save all the changes in the database.
            Some commands that come under DDL:
               ->CREATE:-CREATE TABLE TABLE_NAME (COLUMN_NAME DATATYPES[,....]);
               ->ALTER:-ALTER TABLE table_name ADD column_name COLUMN-definition;   
               ->DROP:- DROP TABLE table_name;  
               ->TRUNCATE:-TRUNCATE TABLE table_name;
    # Key in DataBase:-
          1)Candidate key
          2)Super Key
          3)Primary key
          4)Alternate key
          5)Forign key
    # Constraint in Database:-
          1) NOT NULL
          2) UNIQUE
          3) CHECK
          4) DEFAULT
          5) INDEX
    #sql server data types:-
         ->exact numeric
         ->approx. numeric
         ->date and time
         ->character strings
         ->unicode character strings
         ->binary strings
         ->other data types
  
      2) Data Manipulation Language(DML):-DML commands are used to modify the database. 
        It is responsible for all form of changes in the database.The command of DML is not auto-committed that means it can't permanently save all the changes in the database.
             Some commands that come under DML:
               ->INSERT:-INSERT INTO TABLE_NAME    
                        (col1, col2, col3,.... col N)  
                        VALUES (value1, value2, value3, .... valueN);  
               ->UPDATE:-UPDATE table_name SET [column_name1= value1,...column_nameN = valueN] [WHERE CONDITION] 
               ->DELETE:-DELETE: It is used to remove one or more row from a table.
 

//SQL COMMAND
CREATE DATABASE students;
USE students;
CREATE TABLE studentsinfo
(
StudentID int,
StudentName  varchar(8000),
ParentName varchar(8000),
PhoneNumber bigint,
);

//DROP TABLE studentsinfo;
//DROP DATABASE students;
alter table studentsInfo add address varchar(8000);
alter table studentsInfo drop column address;
alter table studentsInfo add bloodGroup DATE;

insert into studentsInfo values('01','Vanshika','Agrawal','9867543266');    
truncate table studentsInfo;
sp_rename 'studentsInfo','InfoStudents';


# PIVOT in SQL Server

PIVOT relational operator converts data from row level to column level.
PIVOT rotates a table-valued expression by turning the unique values from one column in the expression into multiple columns in the output.
Using PIVOT operator, we can perform aggregate operation where we need them.

-> Syntax:-
            SELECT <non-pivoted column>,  
             <list of pivoted column>  
           FROM  
              (<SELECT query  to produces the data>)  
                     AS <alias name>  
           PIVOT  
            (
              <aggregation function>(<column name>)  
          FOR  
            [<column name that  become column headers>]  
              IN ( [list of  pivoted columns])  
            ) AS <alias name  for  pivot table>   

#IN Operator in SQL 
The IN operator allows you to specify multiple values in a WHERE clause.
The IN operator is a shorthand for multiple OR conditions.
->Syntax:-
    SELECT column_name(s)
      FROM table_name
       WHERE column_name IN (value1, value2, ...);


# Variable Decleration in SQL
  ->Syntax:-
           DECLARE { @LOCAL_VARIABLE data_type [ = value ] }

     Example:- DECLARE @variable_name int = 90;
                 set @variable_name += 10;
                 select @variable_name as example;

# SubQuery in SQL:-
       A Subquery or Inner query or a Nested query is a query within another SQL query and embedded within the WHERE clause.
       A subquery is used to return data that will be used in the main query as a condition to further restrict the data to be retrieved.
       Subqueries can be used with the SELECT, INSERT, UPDATE, and DELETE statements along with the operators like =, <, >, >=, <=, IN, BETWEEN, etc.
 
 ->Syntax:- 
          SELECT column_name [, column_name ]
           FROM   table1 
             WHERE  column_name OPERATOR
            (SELECT column_name [, column_name ]
               FROM table1 OR [, table2 ]);

# SQL Clauses

If you want to provide the SQL Query with some additional functionalities such as filtering the records, sorting the records,
fetching the records, and grouping the records then you need to use the SQL Server Clauses along with the SQL Query.
So, in simple words,we can say that SQL Server clauses are used to provide some additional functionalities.

# Types of SQL clauses :
      ->Where (Filtering the records in a table)
      ->Order by clause (sorting the records in ascending or descending order)
      ->Top n clause (Fetching top n records)
      ->Group by clause (Grouping a set of rows)
      ->Having Clause (Filtering the data like where clause)

Where clause: 
   Ex- SELECT * FROM Employee WHERE CITY = ‘MUMBAI’;
Order clause:
   Ex- SELECT * FROM Employee ORDER BY Name;
Top n clause:
   Ex- SELECT TOP (3) Name FROM Person ORDER BY Name;
Group by clause:
   Ex- SELECT Department, COUNT(*) AS TotalEmployee
         FROM Employee 
        GROUP BY Department
        
//---------------------------------SQL JOIN ----------------------------------------//   
 SQL Join :-
    A JOIN clause is used to combine rows from two or more tables, based on a related column between them.
1)Inner Join :-
         The INNER JOIN keyword selects records that have matching values in both tables.
 Syntax:-
      SELECT column_name(s)
      FROM table1
      INNER JOIN table2
      ON table1.column_name = table2.column_name;
2)Left Join :-
        The LEFT JOIN keyword returns all records from the left table (table1), and the matching records from the right table (table2). 
        The result is 0 records from the right side, if there is no match.
  Syntax:-
      SELECT column_name(s)
      FROM table1
      LEFT JOIN table2
      ON table1.column_name = table2.column_name;
3)Right Join :-
        The RIGHT JOIN keyword returns all records from the right table (table2), and the matching records from the left table (table1).
        The result is 0 records from the left side, if there is no match.
  Syntax:-
      SELECT column_name(s)
      FROM table1
      RIGHT JOIN table2
      ON table1.column_name = table2.column_name;
4)Full join:-
        The FULL OUTER JOIN keyword returns all records when there is a match in left (table1) or right (table2) table records.
  Synatx:-
     SELECT column_name(s)
     FROM table1
     FULL OUTER JOIN table2
     ON table1.column_name = table2.column_name
     WHERE condition;
5)Self Join:-
       A self join is a regular join, but the table is joined with itself.
   Syntax:-
     SELECT column_name(s)
     FROM table1 T1, table1 T2
     WHERE condition;
6)Cross Join:-
       When we combine two or more tables with each other without any condition (where or on) then we call this type of joins cross join.
   Syntax:-
     SELECT column names
     FROM  TableA
     CROSS JOIN TableB     
     
     
 -----------------SQL LOOP------------------
SQL Server supports the WHILE loop. The execution of the statements can be controlled from within the WHILE block using BREAK and CONTINUE keywords.

Syntax:- WHILE <condition>
           SQL Statement | statement_block | BREAK | CONTINUE


---------------Stored Procedure---------------
A stored procedure is a prepared SQL code that you can save,so the code can be reused over and over again.

Stored Procedure Syntax:-
          CREATE PROCEDURE procedure_name
            AS
              sql_statement
            GO;

Execute a Stored Procedure:-
           EXEC procedure_name; 

-------------- Create View Statement ---------------
 In SQL, a view is a virtual table based on the result-set of an SQL statement.
 A view contains rows and columns, just like a real table. 
 The fields in a view are fields from one or more real tables in the database.
  
Create View Syntax:-
          CREATE VIEW view_name AS
           SELECT column1, column2, ...
           FROM table_name
           WHERE condition;

Execute View :-
      Select * From View_Name;

---------------------Function In Sql----------------

Functions in SQL Server are the database objects that contains a set of SQL statements to perform a specific task. 
A function accepts input parameters, perform actions, and then return the result. We should note that functions always return either a single value or a table.

->SQL Server categorizes the functions into two types:

1)System Functions :-Functions that are defined by the system are known as system functions.
 The built-in functions save us time while performing the specific task. 
 These types of functions usually work with the SQL SELECT statement to calculate values and manipulate data.

2)User-Defined Functions:-Functions that are created by the user in the system database or a user-defined database are known as user-defined functions.
 The UDF functions accept parameters, perform actions, and returns the result.

  # SQL Server categorizes the user-defined functions mainly into two types:

       i)Scalar Functions
            Syntax:-
                CREATE FUNCTION schema_name.function_name (parameter_list)  
                    RETURNS data_type AS  
                       BEGIN  
                          statements  
                       RETURN value  
                    END  
 
       ii)Table-Valued Functions:-
              Syntax:-
               CREATE FUNCTION fudf_GetEmployee()  
                RETURNS TABLE  
                  AS  
                RETURN (SELECT * FROM Employee)  

-------------------SQL Indexes-----------------
  Indexes are used to retrieve data from the database more quickly than otherwise. The users cannot see the indexes, they are just used to speed up searches/queries.
Syntax:-
    CREATE INDEX index_name
    ON table_name (column1, column2, ...);

Syntax:-
    CREATE UNIQUE INDEX index_name
    ON table_name (column1, column2, ...);    
